// Generated by view binder compiler. Do not edit!
package com.example.downloader.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.downloader.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NotificationDownloadBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnPause;

  @NonNull
  public final Button btnResume;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final TextView txtLink;

  @NonNull
  public final TextView txtPercent;

  @NonNull
  public final TextView txtTitle;

  private NotificationDownloadBinding(@NonNull LinearLayout rootView, @NonNull Button btnCancel,
      @NonNull Button btnPause, @NonNull Button btnResume, @NonNull ProgressBar progressBar,
      @NonNull TextView txtLink, @NonNull TextView txtPercent, @NonNull TextView txtTitle) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnPause = btnPause;
    this.btnResume = btnResume;
    this.progressBar = progressBar;
    this.txtLink = txtLink;
    this.txtPercent = txtPercent;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NotificationDownloadBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NotificationDownloadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.notification_download, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NotificationDownloadBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancel;
      Button btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btnPause;
      Button btnPause = ViewBindings.findChildViewById(rootView, id);
      if (btnPause == null) {
        break missingId;
      }

      id = R.id.btnResume;
      Button btnResume = ViewBindings.findChildViewById(rootView, id);
      if (btnResume == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.txtLink;
      TextView txtLink = ViewBindings.findChildViewById(rootView, id);
      if (txtLink == null) {
        break missingId;
      }

      id = R.id.txtPercent;
      TextView txtPercent = ViewBindings.findChildViewById(rootView, id);
      if (txtPercent == null) {
        break missingId;
      }

      id = R.id.txtTitle;
      TextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new NotificationDownloadBinding((LinearLayout) rootView, btnCancel, btnPause,
          btnResume, progressBar, txtLink, txtPercent, txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
